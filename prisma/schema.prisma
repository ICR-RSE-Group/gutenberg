// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
  enums = true
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  admin         Boolean       @default(false)
  accounts      Account[]
  sessions      Session[]
  Problem       Problem[]
  UserOnEvent   UserOnEvent[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Problem {
  id        Int      @id @default(autoincrement())
  tag       String
  section   String   @default("")
  createdAt DateTime @default(now())
  User      User     @relation(fields: [userEmail], references: [email])
  userEmail String
  complete  Boolean  @default(false)
  solution  String   @default("")
  difficulty Int     @default(5)
  notes     String   @default("")
  @@unique([userEmail, tag, section])
}

enum EventStatus {
  REQUEST
  STUDENT
  INSTRUCTOR
  REJECTED
}

model UserOnEvent {
  user    User?   @relation(fields: [userEmail], references: [email])
  userEmail String // relation scalar field (used in the `@relation` attribute above)
  event   Event  @relation(fields: [eventId], references: [id])
  eventId Int // relation scalar field (used in the `@relation` attribute above)
  status  EventStatus @default(REQUEST)

  @@id([userEmail, eventId])
}

model Event {
  id          Int           @id @default(autoincrement())
  name        String        @default("")
  summary     String        @default("")
  enrol       String        @default("")
  content     String        @default("")
  start       DateTime      @default(now())
  end         DateTime      @default(now())
  EventGroup  EventGroup[]
  UserOnEvent UserOnEvent[]
}

model EventGroup {
  id        Int         @id @default(autoincrement())
  name      String
  summary   String
  content   String        @default("")
  start     DateTime
  end       DateTime
  location  String
  event     Event       @relation(fields: [eventId], references: [id])
  eventId   Int
  EventItem EventItem[]
}

model EventItem {
  id      Int        @id @default(autoincrement())
  group   EventGroup @relation(fields: [groupId], references: [id])
  groupId Int
  order   Int
  section String
}
